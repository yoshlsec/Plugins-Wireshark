local function main()
    local tw = TextWindow.new("Data Sent per IP")

    local bytes_sent = {}
    local tap = Listener.new()
    local function remove()
        tap:remove()
    end
    tw:set_atclose(remove)

    local function format_bytes(bytes)
        if bytes >= 1073741824 then                         -- >= 1 GB
            return string.format("%.2f GB", bytes / 1073741824)
        elseif bytes >= 1048576 then                        -- >= 1 MB
            return string.format("%.2f MB", bytes / 1048576)
        elseif bytes >= 1024 then                           -- >= 1 KB
            return string.format("%.2f KB", bytes / 1024)
        else
            return bytes .. " B"                            -- Bytes
        end
    end

    function tap.packet(pinfo, tvb)
        local src_ip = tostring(pinfo.src)
        local packet_length = tvb:len()

        bytes_sent[src_ip] = (bytes_sent[src_ip] or 0) + packet_length
    end

    local function get_sorted_ips()
        local sorted_ips = {}
        for ip, bytes in pairs(bytes_sent) do
            table.insert(sorted_ips, {ip = ip, bytes = bytes})
        end
        table.sort(sorted_ips, function(a, b) return a.bytes < b.bytes end)
        return sorted_ips
    end

    function tap.draw()
        tw:clear()
        tw:append(string.format("%-30s%-30s\n", "IP Address", "Data Receive"))
        tw:append(string.rep("=", 42) .. "\n")

        for _, entry in ipairs(get_sorted_ips()) do
            tw:append(string.format("%-30s%-30s\n", entry.ip, format_bytes(entry.bytes)))
        end
    end

    function tap.reset()
        bytes_sent = {}
        tw:clear()
    end

    retap_packets()
end
set_plugin_info({
    version = "1.0",
    description = "Organizes the IP data flow from lowest to highest",
    author = "yoshl",
    repository = "https://github.com/yoshlsec/Plugins-Wireshark/"
})
register_menu("Receiver Sorter", main, MENU_TOOLS_UNSORTED)
